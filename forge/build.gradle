plugins {
    id 'com.github.johnrengelman.shadow'
}

loom {
    forge {
    }
}

architectury {
    platformSetupLoomIde()
    forge()
}



configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    forge "net.minecraftforge:forge:$rootProject.forge_version"

    modImplementation "dev.architectury:architectury-forge:$rootProject.architectury_api_version"
    
    // Runtime Serene Seasons + GlitchCore via Modrinth (use version IDs for reliability)
    // Serene Seasons 9.1.0.2 (Forge 1.20.1) -> versionId YXTfAkOf
    modRuntimeOnly "maven.modrinth:serene-seasons:YXTfAkOf"
    // GlitchCore 0.0.1.1 (Forge 1.20.1) -> versionId pYPZ5MNI
    modRuntimeOnly "maven.modrinth:glitchcore:pYPZ5MNI"
    
    // Note: AutoConfig, AppleCore, and HarvestCraft dependencies are commented out
    // as they require specific versions that may not be available
    // These can be added back once the correct versions are identified
    
    // AutoConfig for configuration management
    // modImplementation "me.shedaniel.autoconfig:AutoConfig:1.0.0-beta"
    
    // AppleCore dependency (required) - using a more appropriate version
    // modImplementation "squeek.applecore:AppleCore:1.20.1-1.0.0"
    
    // Optional mod dependencies
    // modImplementation "com.pam.harvestcraft:harvestcraft:1.20.1-1.0.0"

    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionForge')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('META-INF/mods.toml') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
