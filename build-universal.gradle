// Universal JAR Build for Hunger Overhaul Reborn
// Creates a single JAR that works with both Forge and Fabric, and both Minecraft versions

plugins {
    id 'dev.architectury.loom' version '1.11-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1' apply false
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version
}

// Common module configuration
project(':common') {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'
    
    base {
        // Single universal JAR name
        archivesName = rootProject.archives_name
    }
    
    repositories {
        mavenCentral()
        maven { url "https://maven.fabricmc.net/" }
        maven { url "https://maven.architectury.dev/" }
        maven { url "https://files.minecraftforge.net/maven/" }
        maven { url "https://maven.shedaniel.me/" }
        maven { url "https://jitpack.io" }
        maven { url "https://api.modrinth.com/maven" }
        maven { url "https://cursemaven.com" }
        maven { url "https://maven.glitchfiend.com/" }
    }
    
    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        mappings loom.officialMojangMappings()
    }
    
    java {
        withSourcesJar()
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }
    
    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }
    
    // Create universal JAR task
    task universalJar(type: Jar) {
        group = 'build'
        description = 'Creates a universal JAR that works with both Forge and Fabric, and both Minecraft versions'
        archiveClassifier = 'universal'
        from sourceSets.main.output
        
        manifest {
            attributes([
                'Implementation-Title': project.name,
                'Implementation-Version': project.version,
                'Implementation-Vendor': 'Netroaki',
                'Multi-Loader-Support': 'Forge,Fabric',
                'Multi-Version-Support': '1.20.1,1.21.1',
                'Main-Class': 'org.Netroaki.Main.HOReborn'
            ])
        }
        
        // Add version and loader info to JAR
        metaInf {
            from('src/main/resources') {
                include 'version-info.properties'
            }
        }
    }
    
    // Make universalJar depend on build
    universalJar.dependsOn build
    
    // Publishing configuration
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
                
                // Also publish universal JAR
                artifact universalJar
            }
        }
    }
}

// Platform-specific modules (fabric/forge) - these are just for development
['fabric', 'forge'].each { platform ->
    project(":${platform}") {
        apply plugin: 'dev.architectury.loom'
        apply plugin: 'architectury-plugin'
        apply plugin: 'maven-publish'
        
        base {
            // Keep platform-specific names for development builds
            archivesName = "$rootProject.archives_name-$project.name"
        }
        
        repositories {
            mavenCentral()
            maven { url "https://maven.fabricmc.net/" }
            maven { url "https://maven.architectury.dev/" }
            maven { url "https://files.minecraftforge.net/maven/" }
            maven { url "https://maven.shedaniel.me/" }
            maven { url "https://jitpack.io" }
            maven { url "https://api.modrinth.com/maven" }
            maven { url "https://cursemaven.com" }
            maven { url "https://maven.glitchfiend.com/" }
        }
        
        dependencies {
            implementation project(':common')
            minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
            mappings loom.officialMojangMappings()
        }
        
        java {
            withSourcesJar()
            sourceCompatibility = JavaVersion.VERSION_17
            targetCompatibility = JavaVersion.VERSION_17
        }
        
        tasks.withType(JavaCompile).configureEach {
            it.options.release = 17
        }
        
        // Publishing configuration
        publishing {
            publications {
                mavenJava(MavenPublication) {
                    artifactId = base.archivesName.get()
                    from components.java
                }
            }
        }
    }
}

// Root project tasks
task buildUniversalJar {
    group = 'build'
    description = 'Builds the universal JAR that works with both loaders and both versions'
    dependsOn ':common:universalJar'
}

task copyUniversalJar {
    group = 'build'
    description = 'Copies the universal JAR to a distribution folder'
    dependsOn buildUniversalJar
    
    doLast {
        def distDir = file("$buildDir/distributions")
        distDir.mkdirs()
        
        def universalJar = project(':common').tasks.universalJar
        copy {
            from universalJar.archiveFile
            into distDir
        }
        
        println "Universal JAR copied to: ${distDir.absolutePath}"
        println "This JAR works with:"
        println "  - Forge 1.20.1 and 1.21.1"
        println "  - Fabric 1.20.1 and 1.21.1"
    }
}

// Create version info file
task createVersionInfo {
    group = 'build'
    description = 'Creates version info file for universal JAR'
    
    doLast {
        def versionInfoFile = file("$buildDir/version-info.properties")
        versionInfoFile.parentFile.mkdirs()
        
        versionInfoFile.text = """
# Hunger Overhaul Reborn - Universal JAR
mod.name=Hunger Overhaul Reborn
mod.version=${project.version}
supported.loaders=Forge,Fabric
supported.versions=1.20.1,1.21.1
build.date=${new Date().format('yyyy-MM-dd HH:mm:ss')}
build.system=universal
compatibility.mode=architectury-universal
"""
    }
}

// Make build tasks depend on version info
buildUniversalJar.dependsOn createVersionInfo
